import React, { useState, useEffect } from 'react';
import { useDropzone } from 'react-dropzone';
import { 
  Users, 
  Plus, 
  Search, 
  MessageSquare, 
  Upload, 
  FileText, 
  DollarSign,
  Phone,
  Mail,
  Building,
  Tag,
  Calendar,
  Edit,
  Trash2,
  Send,
  Bot,
  User
} from 'lucide-react';
import axios from 'axios';

interface Client {
  id: string;
  name: string;
  email: string;
  phone?: string;
  company?: string;
  status: 'ACTIVE' | 'INACTIVE' | 'PROSPECT' | 'ARCHIVED';
  tags: string[];
  notes?: string;
  createdAt: string;
  updatedAt: string;
  contacts: any[];
  deals: any[];
  documents: any[];
  chatSessions: any[];
}

interface ChatMessage {
  id: string;
  content: string;
  role: 'USER' | 'ASSISTANT' | 'SYSTEM';
  createdAt: string;
}

interface ChatSession {
  id: string;
  title: string;
  status: string;
  messages: ChatMessage[];
  client: Client;
}

export default function CRMDashboard() {
  const [activeTab, setActiveTab] = useState('overview');
  const [clients, setClients] = useState<Client[]>([]);
  const [selectedClient, setSelectedClient] = useState<Client | null>(null);
  const [searchTerm, setSearchTerm] = useState('');
  const [loading, setLoading] = useState(false);
  const [showNewClientForm, setShowNewClientForm] = useState(false);
  const [chatSessions, setChatSessions] = useState<ChatSession[]>([]);
  const [activeChatSession, setActiveChatSession] = useState<ChatSession | null>(null);
  const [newMessage, setNewMessage] = useState('');
  const [sendingMessage, setSendingMessage] = useState(false);

  // New client form state
  const [newClient, setNewClient] = useState({\n    name: '',\n    email: '',\n    phone: '',\n    company: '',\n    status: 'PROSPECT' as const,\n    tags: [] as string[],\n    notes: ''\n  });

  // File upload state
  const [uploadingFiles, setUploadingFiles] = useState(false);

  useEffect(() => {\n    fetchClients();\n  }, []);

  const fetchClients = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.get('/api/crm/clients');\n      if (response.data.success) {\n        setClients(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching clients:', error);\n    } finally {\n      setLoading(false);\n    }\n  };

  const fetchClientDetails = async (clientId: string) => {\n    try {\n      const response = await axios.get(`/api/crm/clients/${clientId}`);\n      if (response.data.success) {\n        setSelectedClient(response.data.data);\n      }\n    } catch (error) {\n      console.error('Error fetching client details:', error);\n    }\n  };

  const createClient = async () => {\n    try {\n      setLoading(true);\n      const response = await axios.post('/api/crm/clients', newClient);\n      if (response.data.success) {\n        setClients([response.data.data, ...clients]);\n        setShowNewClientForm(false);\n        setNewClient({\n          name: '',\n          email: '',\n          phone: '',\n          company: '',\n          status: 'PROSPECT',\n          tags: [],\n          notes: ''\n        });\n      }\n    } catch (error) {\n      console.error('Error creating client:', error);\n    } finally {\n      setLoading(false);\n    }\n  };

  const onDrop = async (acceptedFiles: File[]) => {\n    if (!selectedClient) return;\n    \n    try {\n      setUploadingFiles(true);\n      const formData = new FormData();\n      acceptedFiles.forEach(file => {\n        formData.append('files', file);\n      });\n      formData.append('clientId', selectedClient.id);\n      formData.append('uploadedBy', 'Admin'); // In real app, get from auth\n\n      const response = await axios.post('/api/crm/documents/upload', formData, {\n        headers: {\n          'Content-Type': 'multipart/form-data'\n        }\n      });\n\n      if (response.data.success) {\n        // Refresh client details to show new documents\n        fetchClientDetails(selectedClient.id);\n      }\n    } catch (error) {\n      console.error('Error uploading files:', error);\n    } finally {\n      setUploadingFiles(false);\n    }\n  };

  const { getRootProps, getInputProps, isDragActive } = useDropzone({ onDrop });

  const startChatSession = async () => {\n    if (!selectedClient) return;\n    \n    try {\n      const response = await axios.post('/api/crm/chat/sessions', {\n        clientId: selectedClient.id,\n        title: `Chat with ${selectedClient.name}`\n      });\n      \n      if (response.data.success) {\n        setActiveChatSession(response.data.data);\n        setActiveTab('chat');\n      }\n    } catch (error) {\n      console.error('Error starting chat session:', error);\n    }\n  };

  const sendMessage = async () => {\n    if (!activeChatSession || !newMessage.trim() || sendingMessage) return;\n    \n    try {\n      setSendingMessage(true);\n      \n      // Add user message\n      const userMessageResponse = await axios.post('/api/crm/chat/messages', {\n        chatSessionId: activeChatSession.id,\n        content: newMessage,\n        role: 'USER'\n      });\n      \n      if (userMessageResponse.data.success) {\n        const updatedSession = {\n          ...activeChatSession,\n          messages: [...activeChatSession.messages, userMessageResponse.data.data]\n        };\n        setActiveChatSession(updatedSession);\n        \n        // Get AI response\n        const aiResponse = await axios.post('/api/crm/chat/ai-response', {\n          chatSessionId: activeChatSession.id,\n          messages: updatedSession.messages,\n          clientContext: selectedClient\n        });\n        \n        if (aiResponse.data.success) {\n          setActiveChatSession({\n            ...updatedSession,\n            messages: [...updatedSession.messages, aiResponse.data.data]\n          });\n        }\n      }\n      \n      setNewMessage('');\n    } catch (error) {\n      console.error('Error sending message:', error);\n    } finally {\n      setSendingMessage(false);\n    }\n  };

  const filteredClients = clients.filter(client =>\n    client.name.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    client.email.toLowerCase().includes(searchTerm.toLowerCase()) ||\n    (client.company && client.company.toLowerCase().includes(searchTerm.toLowerCase()))\n  );

  const getStatusColor = (status: string) => {\n    const colors = {\n      ACTIVE: 'bg-green-100 text-green-800',\n      INACTIVE: 'bg-gray-100 text-gray-800',\n      PROSPECT: 'bg-blue-100 text-blue-800',\n      ARCHIVED: 'bg-red-100 text-red-800'\n    };\n    return colors[status as keyof typeof colors] || 'bg-gray-100 text-gray-800';\n  };

  return (\n    <div className=\"p-6\">\n      <div className=\"flex justify-between items-center mb-6\">\n        <h1 className=\"text-2xl font-bold text-gray-900\">CRM Dashboard</h1>\n        <button\n          onClick={() => setShowNewClientForm(true)}\n          className=\"btn btn-primary flex items-center gap-2\"\n        >\n          <Plus className=\"w-4 h-4\" />\n          New Client\n        </button>\n      </div>\n\n      {/* Tab Navigation */}\n      <div className=\"flex space-x-1 mb-6\">\n        {[\n          { id: 'overview', label: 'Overview', icon: Users },\n          { id: 'clients', label: 'Clients', icon: Users },\n          { id: 'documents', label: 'Documents', icon: FileText },\n          { id: 'chat', label: 'AI Chat', icon: MessageSquare }\n        ].map(({ id, label, icon: Icon }) => (\n          <button\n            key={id}\n            onClick={() => setActiveTab(id)}\n            className={`px-4 py-2 rounded-lg flex items-center gap-2 transition-colors ${\n              activeTab === id\n                ? 'bg-blue-600 text-white'\n                : 'bg-gray-100 text-gray-700 hover:bg-gray-200'\n            }`}\n          >\n            <Icon className=\"w-4 h-4\" />\n            {label}\n          </button>\n        ))}\n      </div>\n\n      {/* Overview Tab */}\n      {activeTab === 'overview' && (\n        <div className=\"grid grid-cols-1 md:grid-cols-2 lg:grid-cols-4 gap-6 mb-8\">\n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Clients</p>\n                <p className=\"text-2xl font-bold text-gray-900\">{clients.length}</p>\n              </div>\n              <Users className=\"w-8 h-8 text-blue-600\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Active Clients</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {clients.filter(c => c.status === 'ACTIVE').length}\n                </p>\n              </div>\n              <Users className=\"w-8 h-8 text-green-600\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Prospects</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {clients.filter(c => c.status === 'PROSPECT').length}\n                </p>\n              </div>\n              <Users className=\"w-8 h-8 text-yellow-600\" />\n            </div>\n          </div>\n          \n          <div className=\"bg-white p-6 rounded-lg shadow-sm border\">\n            <div className=\"flex items-center justify-between\">\n              <div>\n                <p className=\"text-sm font-medium text-gray-600\">Total Documents</p>\n                <p className=\"text-2xl font-bold text-gray-900\">\n                  {clients.reduce((total, client) => total + client.documents.length, 0)}\n                </p>\n              </div>\n              <FileText className=\"w-8 h-8 text-purple-600\" />\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* Main Content Area */}\n      <div className=\"grid grid-cols-1 lg:grid-cols-3 gap-6\">\n        {/* Client List */}\n        {(activeTab === 'clients' || activeTab === 'overview') && (\n          <div className={`${selectedClient ? 'lg:col-span-1' : 'lg:col-span-3'} bg-white rounded-lg shadow-sm border`}>\n            <div className=\"p-4 border-b\">\n              <div className=\"flex items-center gap-4\">\n                <div className=\"relative flex-1\">\n                  <Search className=\"absolute left-3 top-1/2 transform -translate-y-1/2 text-gray-400 w-4 h-4\" />\n                  <input\n                    type=\"text\"\n                    placeholder=\"Search clients...\"\n                    value={searchTerm}\n                    onChange={(e) => setSearchTerm(e.target.value)}\n                    className=\"pl-10 pr-4 py-2 w-full border rounded-lg\"\n                  />\n                </div>\n              </div>\n            </div>\n            \n            <div className=\"p-4\">\n              {loading ? (\n                <div className=\"text-center py-4\">Loading...</div>\n              ) : (\n                <div className=\"space-y-3\">\n                  {filteredClients.map((client) => (\n                    <div\n                      key={client.id}\n                      onClick={() => {\n                        setSelectedClient(client);\n                        fetchClientDetails(client.id);\n                      }}\n                      className={`p-4 rounded-lg border cursor-pointer transition-all hover:shadow-md ${\n                        selectedClient?.id === client.id ? 'ring-2 ring-blue-500 bg-blue-50' : 'hover:bg-gray-50'\n                      }`}\n                    >\n                      <div className=\"flex items-start justify-between\">\n                        <div className=\"flex-1\">\n                          <h3 className=\"font-semibold text-gray-900\">{client.name}</h3>\n                          <p className=\"text-sm text-gray-600 flex items-center gap-1\">\n                            <Mail className=\"w-3 h-3\" />\n                            {client.email}\n                          </p>\n                          {client.company && (\n                            <p className=\"text-sm text-gray-600 flex items-center gap-1\">\n                              <Building className=\"w-3 h-3\" />\n                              {client.company}\n                            </p>\n                          )}\n                          {client.phone && (\n                            <p className=\"text-sm text-gray-600 flex items-center gap-1\">\n                              <Phone className=\"w-3 h-3\" />\n                              {client.phone}\n                            </p>\n                          )}\n                        </div>\n                        <span className={`px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(client.status)}`}>\n                          {client.status}\n                        </span>\n                      </div>\n                      \n                      {client.tags.length > 0 && (\n                        <div className=\"mt-2 flex flex-wrap gap-1\">\n                          {client.tags.map((tag, index) => (\n                            <span key={index} className=\"px-2 py-1 text-xs bg-gray-100 text-gray-700 rounded\">\n                              {tag}\n                            </span>\n                          ))}\n                        </div>\n                      )}\n                      \n                      <div className=\"mt-2 flex items-center gap-4 text-xs text-gray-500\">\n                        <span>{client.deals.length} deals</span>\n                        <span>{client.documents.length} docs</span>\n                        <span>{client.chatSessions.length} chats</span>\n                      </div>\n                    </div>\n                  ))}\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n\n        {/* Client Details */}\n        {selectedClient && (activeTab === 'clients' || activeTab === 'overview') && (\n          <div className=\"lg:col-span-2 bg-white rounded-lg shadow-sm border\">\n            <div className=\"p-4 border-b flex items-center justify-between\">\n              <h2 className=\"text-lg font-semibold\">Client Details</h2>\n              <div className=\"flex items-center gap-2\">\n                <button\n                  onClick={startChatSession}\n                  className=\"btn btn-sm btn-outline flex items-center gap-2\"\n                >\n                  <MessageSquare className=\"w-4 h-4\" />\n                  Chat\n                </button>\n                <button className=\"btn btn-sm btn-outline flex items-center gap-2\">\n                  <Edit className=\"w-4 h-4\" />\n                  Edit\n                </button>\n              </div>\n            </div>\n            \n            <div className=\"p-6\">\n              <div className=\"grid grid-cols-1 md:grid-cols-2 gap-6\">\n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Contact Information</h3>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm\"><strong>Name:</strong> {selectedClient.name}</p>\n                    <p className=\"text-sm\"><strong>Email:</strong> {selectedClient.email}</p>\n                    {selectedClient.phone && <p className=\"text-sm\"><strong>Phone:</strong> {selectedClient.phone}</p>}\n                    {selectedClient.company && <p className=\"text-sm\"><strong>Company:</strong> {selectedClient.company}</p>}\n                    <p className=\"text-sm\"><strong>Status:</strong> \n                      <span className={`ml-2 px-2 py-1 text-xs font-medium rounded-full ${getStatusColor(selectedClient.status)}`}>\n                        {selectedClient.status}\n                      </span>\n                    </p>\n                  </div>\n                </div>\n                \n                <div>\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Activity Summary</h3>\n                  <div className=\"space-y-2\">\n                    <p className=\"text-sm\"><strong>Deals:</strong> {selectedClient.deals.length}</p>\n                    <p className=\"text-sm\"><strong>Documents:</strong> {selectedClient.documents.length}</p>\n                    <p className=\"text-sm\"><strong>Chat Sessions:</strong> {selectedClient.chatSessions.length}</p>\n                    <p className=\"text-sm\"><strong>Created:</strong> {new Date(selectedClient.createdAt).toLocaleDateString()}</p>\n                  </div>\n                </div>\n              </div>\n              \n              {selectedClient.notes && (\n                <div className=\"mt-6\">\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Notes</h3>\n                  <p className=\"text-sm text-gray-600 bg-gray-50 p-3 rounded\">{selectedClient.notes}</p>\n                </div>\n              )}\n\n              {/* File Upload Area */}\n              <div className=\"mt-6\">\n                <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Document Upload</h3>\n                <div\n                  {...getRootProps()}\n                  className={`border-2 border-dashed rounded-lg p-6 text-center transition-colors ${\n                    isDragActive ? 'border-blue-500 bg-blue-50' : 'border-gray-300 hover:border-gray-400'\n                  }`}\n                >\n                  <input {...getInputProps()} />\n                  <Upload className=\"w-8 h-8 text-gray-400 mx-auto mb-2\" />\n                  {uploadingFiles ? (\n                    <p className=\"text-sm text-gray-600\">Uploading files...</p>\n                  ) : isDragActive ? (\n                    <p className=\"text-sm text-gray-600\">Drop files here...</p>\n                  ) : (\n                    <p className=\"text-sm text-gray-600\">\n                      Drag and drop files here, or click to select files\n                    </p>\n                  )}\n                </div>\n              </div>\n\n              {/* Recent Documents */}\n              {selectedClient.documents.length > 0 && (\n                <div className=\"mt-6\">\n                  <h3 className=\"text-sm font-medium text-gray-900 mb-2\">Recent Documents ({selectedClient.documents.length})</h3>\n                  <div className=\"space-y-2\">\n                    {selectedClient.documents.slice(0, 5).map((doc: any) => (\n                      <div key={doc.id} className=\"flex items-center gap-3 p-2 bg-gray-50 rounded\">\n                        <FileText className=\"w-4 h-4 text-gray-500\" />\n                        <div className=\"flex-1\">\n                          <p className=\"text-sm font-medium\">{doc.originalName}</p>\n                          <p className=\"text-xs text-gray-500\">{new Date(doc.createdAt).toLocaleDateString()}</p>\n                        </div>\n                        <span className=\"text-xs text-gray-500\">{(doc.fileSize / 1024).toFixed(1)}KB</span>\n                      </div>\n                    ))}\n                  </div>\n                </div>\n              )}\n            </div>\n          </div>\n        )}\n      </div>\n\n      {/* Chat Interface */}\n      {activeTab === 'chat' && activeChatSession && (\n        <div className=\"bg-white rounded-lg shadow-sm border\">\n          <div className=\"p-4 border-b\">\n            <h2 className=\"text-lg font-semibold\">AI Chat - {activeChatSession.client.name}</h2>\n          </div>\n          \n          <div className=\"h-96 overflow-y-auto p-4 space-y-4\">\n            {activeChatSession.messages.map((message) => (\n              <div key={message.id} className={`flex ${message.role === 'USER' ? 'justify-end' : 'justify-start'}`}>\n                <div className={`max-w-xs lg:max-w-md px-4 py-2 rounded-lg ${\n                  message.role === 'USER' \n                    ? 'bg-blue-600 text-white' \n                    : 'bg-gray-100 text-gray-900'\n                }`}>\n                  <div className=\"flex items-start gap-2\">\n                    {message.role === 'ASSISTANT' && <Bot className=\"w-4 h-4 mt-1 flex-shrink-0\" />}\n                    {message.role === 'USER' && <User className=\"w-4 h-4 mt-1 flex-shrink-0\" />}\n                    <div>\n                      <p className=\"text-sm\">{message.content}</p>\n                      <p className={`text-xs mt-1 ${\n                        message.role === 'USER' ? 'text-blue-100' : 'text-gray-500'\n                      }`}>\n                        {new Date(message.createdAt).toLocaleTimeString()}\n                      </p>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            ))}\n          </div>\n          \n          <div className=\"p-4 border-t\">\n            <div className=\"flex gap-2\">\n              <input\n                type=\"text\"\n                value={newMessage}\n                onChange={(e) => setNewMessage(e.target.value)}\n                onKeyPress={(e) => e.key === 'Enter' && sendMessage()}\n                placeholder=\"Type your message...\"\n                className=\"flex-1 px-3 py-2 border rounded-lg\"\n                disabled={sendingMessage}\n              />\n              <button\n                onClick={sendMessage}\n                disabled={sendingMessage || !newMessage.trim()}\n                className=\"btn btn-primary flex items-center gap-2\"\n              >\n                <Send className=\"w-4 h-4\" />\n                Send\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n\n      {/* New Client Modal */}\n      {showNewClientForm && (\n        <div className=\"fixed inset-0 bg-black bg-opacity-50 flex items-center justify-center z-50\">\n          <div className=\"bg-white rounded-lg p-6 w-full max-w-md\">\n            <h2 className=\"text-lg font-semibold mb-4\">New Client</h2>\n            \n            <div className=\"space-y-4\">\n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Name *</label>\n                <input\n                  type=\"text\"\n                  value={newClient.name}\n                  onChange={(e) => setNewClient({ ...newClient, name: e.target.value })}\n                  className=\"w-full px-3 py-2 border rounded-lg\"\n                  placeholder=\"Client name\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Email *</label>\n                <input\n                  type=\"email\"\n                  value={newClient.email}\n                  onChange={(e) => setNewClient({ ...newClient, email: e.target.value })}\n                  className=\"w-full px-3 py-2 border rounded-lg\"\n                  placeholder=\"client@example.com\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Phone</label>\n                <input\n                  type=\"tel\"\n                  value={newClient.phone}\n                  onChange={(e) => setNewClient({ ...newClient, phone: e.target.value })}\n                  className=\"w-full px-3 py-2 border rounded-lg\"\n                  placeholder=\"(555) 123-4567\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Company</label>\n                <input\n                  type=\"text\"\n                  value={newClient.company}\n                  onChange={(e) => setNewClient({ ...newClient, company: e.target.value })}\n                  className=\"w-full px-3 py-2 border rounded-lg\"\n                  placeholder=\"Company name\"\n                />\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Status</label>\n                <select\n                  value={newClient.status}\n                  onChange={(e) => setNewClient({ ...newClient, status: e.target.value as any })}\n                  className=\"w-full px-3 py-2 border rounded-lg\"\n                >\n                  <option value=\"PROSPECT\">Prospect</option>\n                  <option value=\"ACTIVE\">Active</option>\n                  <option value=\"INACTIVE\">Inactive</option>\n                </select>\n              </div>\n              \n              <div>\n                <label className=\"block text-sm font-medium text-gray-700 mb-1\">Notes</label>\n                <textarea\n                  value={newClient.notes}\n                  onChange={(e) => setNewClient({ ...newClient, notes: e.target.value })}\n                  className=\"w-full px-3 py-2 border rounded-lg\"\n                  rows={3}\n                  placeholder=\"Additional notes...\"\n                />\n              </div>\n            </div>\n            \n            <div className=\"flex gap-3 mt-6\">\n              <button\n                onClick={() => setShowNewClientForm(false)}\n                className=\"btn btn-outline flex-1\"\n              >\n                Cancel\n              </button>\n              <button\n                onClick={createClient}\n                disabled={!newClient.name || !newClient.email || loading}\n                className=\"btn btn-primary flex-1\"\n              >\n                {loading ? 'Creating...' : 'Create Client'}\n              </button>\n            </div>\n          </div>\n        </div>\n      )}\n    </div>\n  );\n}
